#! /bin/bash

# Tencent is pleased to support the open source community by making 蓝鲸智云PaaS平台社区版 (BlueKing PaaS Community Edition) available.
# Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
# Licensed under the MIT License (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://opensource.org/licenses/MIT
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

exec 2>&1

export PATH="/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin:/root/bin:${BASE_PATH}/.envs/paas_agent/bin:$PATH"

# ========================= helper functions start ===============================

function if_fail_then_exit() {
    if [ "$1" != "0" ]; then
        echo "$2"
        exit $1
    fi
}

# ========================= helper functions end ===============================

CODE_PATH="$APP_PATH/code"
CONF_PATH="$APP_PATH/conf"
ENV_PATH="$CONF_PATH/env"
RUN_PATH="$APP_PATH/run"
VCS_TYPE="$VCS_TYPE"
APP_CODE="$APP_CODE"

mkdir -p "$APP_PATH" "$CODE_PATH" "$CONF_PATH" "$RUN_PATH" "$LOG_PATH"
touch $ENV_PATH
export WORKON_HOME="${BASE_APP_PATH}apps/Envs"

#  offline
if [ "$HANDLE" = "OFF" ]; then
    echo "starting offline job"
    if [ -e "$RUN_PATH/supervisord.pid" ]; then
        echo "remove process"
        kill -SIGTERM `cat $RUN_PATH/supervisord.pid`
        while [ -e "$RUN_PATH/supervisord.sock" ]
        do
            echo "waiting process stop"
            sleep 1
        done
        rm $RUN_PATH/uwsgi.pid
        rm $RUN_PATH/uwsgi.sock
        echo "process stop done"
    fi
    if [ "$APP_PATH" != "/" ]; then
        rm -rf "$APP_PATH"
    fi
    if [ "$LOG_PATH" != "/" ]; then
        rm -rf "$LOG_PATH"
    fi
    rm -rf "$WORKON_HOME/$APP_CODE"
    echo "Job Done"
    exit 0
fi

cd $CODE_PATH
if [ -d $APP_CODE ]; then
    rm -rf $APP_CODE
fi
echo "------get app_code for $APP_CODE------"
if [ "$VCS_TYPE" = "git" ]; then
    git clone $VCS_PATH $APP_CODE
else
    svn checkout $VCS_PATH $APP_CODE --non-interactive --no-auth-cache --username=$VCS_USERNAME --password=$VCS_PASSWORD 1> /dev/null
fi
if_fail_then_exit "$?" "------get app_code fail------"
echo "------get app_code success------"

echo "------create virtualenv for $APP_CODE------"
if [ -f "$CODE_PATH/$APP_CODE/runtime.txt" ]; then
    RUNTIME=`cat $CODE_PATH/$APP_CODE/runtime.txt`
fi
if [[ $RUNTIME =~ [P|p]ython(-)*3.* ]]; then
    mkdir -p $WORKON_HOME
    PYTHON3_PATH="/opt/py36"
    if [ ! -e "$WORKON_HOME/$APP_CODE/bin/activate" ]; then
        $PYTHON3_PATH/bin/python -m venv --system-site-packages $WORKON_HOME/$APP_CODE
    fi
    if [ "$BK_ENV" == "testing" ]; then
        echo "mount = /t/$APP_CODE=wsgi.py" >> $CONF_PATH/$APP_CODE.ini
    else
        echo "mount = /o/$APP_CODE=wsgi.py" >> $CONF_PATH/$APP_CODE.ini
    fi
    echo "manage-script-name = true" >> $CONF_PATH/$APP_CODE.ini
else
    export VIRTUALENVWRAPPER_PYTHON="/usr/bin/python"
    source /usr/bin/virtualenvwrapper.sh
    cd "$RUN_PATH" || exit 1
    if [ ! -e "$WORKON_HOME/$APP_CODE/bin/activate" ]; then
        mkvirtualenv "$APP_CODE" --system-site-packages
    fi
fi
source "$WORKON_HOME/$APP_CODE/bin/activate"
source "$ENV_PATH"
echo "------create virtualenv success------"

cd "$CODE_PATH/$APP_CODE" || exit 1

echo "------pip install------"
pip install uwsgi==2.0.13.1 -i $PYPI_SERVER_URL --trusted-host $PYPI_SERVER_HOST
if_fail_then_exit "$?" "------pip install fail------"
pip install -r requirements.txt -i $PYPI_SERVER_URL --trusted-host $PYPI_SERVER_HOST
if_fail_then_exit "$?" "------pip install fail------"
echo "------pip install success------"

echo "------change db------"
python manage.py migrate --noinput && \
echo "------change db success------" || exit 1

python manage.py createcachetable django_cache > /dev/null

chown -R apps.apps "$APP_PATH" "$LOG_PATH"

SUPERVISOR_PATH="/usr/bin"

if [ -e "$RUN_PATH/supervisord.sock" ]; then
    echo "------ restart app server ------"
    su -m - apps <<EOF
    export LC_ALL=en_US.UTF-8
    $SUPERVISOR_PATH/supervisorctl -c  $CONF_PATH/supervisord.conf update
    $SUPERVISOR_PATH/supervisorctl -c  $CONF_PATH/supervisord.conf restart all
EOF
else
    echo "------ start app server ------"
    su -m - apps <<EOF
    export LC_ALL=en_US.UTF-8
    $SUPERVISOR_PATH/supervisord -c $CONF_PATH/supervisord.conf
EOF
fi

sleep 2
$SUPERVISOR_PATH/supervisorctl -c  $CONF_PATH/supervisord.conf status | grep "$APP_CODE"_uwsgi | grep RUNNING &>/dev/null
if_fail_then_exit "$?" "Job Fail"
echo "Job Done"

